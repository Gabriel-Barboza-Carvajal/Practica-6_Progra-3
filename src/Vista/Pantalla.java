/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Controladora.Controladora;
import Modelo.Modelo;
import java.awt.Color;
import java.awt.Graphics;
import static java.lang.Thread.sleep;
import java.util.Observable;
import java.util.Observer;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/**
 *
 * @author gabri
 */
public class Pantalla extends javax.swing.JPanel implements Observer {

    /**
     * Creates new form Pantalla
     */
    private Controladora controladora;

    private Modelo snake;

    public Controladora getControladora() {
        return controladora;
    }

    public void setControladora(Controladora controladora) {

//        super.addKeyListener(controladora);
        this.controladora = controladora;
//        this.addKeyListener(controladora);
    }

    public Modelo getSnake() {
        return snake;
    }

    public void setSnake(Modelo snake) {
        this.snake = snake;
//        this.snake.mover();

    }

    public Pantalla(Modelo snake) {
//        this.setBackground(Color.GREEN.darker());
        this.setSnake(snake);
        this.snake.addObserver(this);
//        this.jPanel1.setVisible(false;);
//        this.setPreferredSize(new Dimension(1000,1000));
//        this.setSize(new Dimension(1000,1000));
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setForeground(new java.awt.Color(240, 240, 240));
        setPreferredSize(new java.awt.Dimension(700, 700));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void paint(Graphics g) {

        // limpia la pantalla 
        g.clearRect(0, 0, this.getWidth(), this.getHeight());

        this.snake.mover();

        try {
            sleep(100);
            this.dibujarLineas(g);

            this.dibujar(g);

        } catch (InterruptedException ex) {
            Logger.getLogger(Pantalla.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void mostrarSalida() throws InterruptedException {

        JOptionPane jp = new JOptionPane();

        jp.add(new JButton("hola"), 0);
        jp.showMessageDialog(null, "perdio");

        sleep(2000);
    }

    public void dibujarLineas(Graphics g) {

        super.paint(g);
        g.setColor(Color.PINK.darker());
        for (int i = 0; i < this.getWidth() / 10; i++) {
            g.drawLine(i * 10, 0, i * 10, this.getHeight());
//            g.fillRect(i*10,0, i*10, this.getHeight());

        }
        g.setColor(Color.PINK.darker());
        for (int i = 0; i < this.getHeight() / 10; i++) {
            g.drawLine(0, i * 10, this.getWidth(), i * 10);
//            g.fillRect(0 ,i*10, this.getWidth(),i*10);
        }

//        g.setColor(Color.blue.darker());
//        for (int i = 0; i < this.getWidth()/10; i++) {
//            g.drawLine(i*10,0, i*10, this.getHeight());
////            g.fillRect(i*10,0, i*10, this.getHeight());
//        
//        }
//        g.setColor(Color.blue.darker());
//        for (int i = 0; i < this.getHeight()/10; i++) {
//            g.drawLine(0,i*10, this.getWidth(),i*10);
////            g.fillRect(0 ,i*10, this.getWidth(),i*10);
//        }
    }

    public Color generarColorRandom() {
        Random rand = new Random();
        float r = rand.nextFloat();
        float g = rand.nextFloat();
        float b = rand.nextFloat();
        Color randomColor = new Color(r, g, b);

        return randomColor.brighter();
    }

    public void dibujar(Graphics g) {
        System.out.print("X : " + this.snake.getxCoor() + " , " + this.snake.getyCoor() + "-- ojas \n"
                + "X*Ancho = " + this.snake.getSnake().get(0).getxCoor() * this.snake.getSnake().get(0).getAncho() + 2 + " ,"
                + "Y*Altura =" + this.snake.getSnake().get(0).getyCoor() * this.snake.getSnake().get(0).getAltura() + 2);
//          g.setColor(Color.WHITE);
//        
//        g.fillRect(this.snake.getSnake().get(0).getxCoor(),//*this.snake.getSnake().get().getAncho()+2,
//                this.snake.getSnake().get(0).getyCoor()//*this.snake.getSnake().get(i).getAltura()+2
//                ,snake.getCuerpo().getAncho() ,snake.getCuerpo().getAltura());

        for (int i = 0; i < this.snake.getSnake().size(); i++) {

            g.setColor(Color.WHITE);

            g.fillRect(this.snake.getSnake().get(i).getxCoor() * this.snake.getSnake().get(i).getAncho() + 2,
                    this.snake.getSnake().get(i).getyCoor() * this.snake.getSnake().get(i).getAltura() + 2,
                     snake.getCuerpo().getAncho() - 4, snake.getCuerpo().getAltura() - 4);
//        
//        g.fillRect(this.snake.getSnake().get(0).getxCoor(),//*this.snake.getSnake().get().getAncho()+2,
//                this.snake.getSnake().get(0).getyCoor()//*this.snake.getSnake().get(i).getAltura()+2
//                ,snake.getCuerpo().getAncho() ,snake.getCuerpo().getAltura());
//                //_--------------------------------------------------------------------------------------------
//                   g.setColor(Color.WHITE);// este es como una version a escala miniaturizada
//        
//        g.fillRect(this.snake.getSnake().get(i).getxCoor(),//*this.snake.getSnake().get().getAncho()+2,
//                this.snake.getSnake().get(i).getyCoor()//*this.snake.getSnake().get(i).getAltura()+2
//                ,snake.getCuerpo().getAncho() ,snake.getCuerpo().getAltura());

        }

        for (int i = 0; i < this.snake.getManzanas().size(); i++) {
            g.setColor(Color.red.darker());
            g.fillRect(this.snake.getManzanas().get(i).getxCoor() * this.snake.getManzanas().get(i).getAncho() + 2,
                    this.snake.getManzanas().get(i).getyCoor() * this.snake.getManzanas().get(i).getAltura() + 2,
                     8, 8);
//            
//        g.setColor(Color.GREEN.darker());
//        
//        g.fillRect(this.snake.getSnake().get(i).getxCoor()*this.snake.getSnake().get(i).getAncho()+2,
//                this.snake.getSnake().get(i).getyCoor()*this.snake.getSnake().get(i).getAltura()+2
//                ,snake.getCuerpo().getAncho()-4 ,snake.getCuerpo().getAltura()-4);
        }
//         try {
//            sleep(1000);
//        } catch (InterruptedException ex) {
//            Logger.getLogger(Pantalla.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        g.fillRect(snake.getCuerpo().getxCoor()*snake.getCuerpo().getAncho()
//                , snake.getCuerpo().getyCoor()*snake.getCuerpo().getAltura()
//                ,snake.getCuerpo().getAncho(),snake.getCuerpo().getAltura());
//        g.setColor(Color.GREEN.darker());
//        g.fillRect(snake.getCuerpo().getxCoor()*snake.getCuerpo().getAncho()+2
//                , snake.getCuerpo().getyCoor()*snake.getCuerpo().getAltura()+2
//                ,snake.getCuerpo().getAncho(),snake.getCuerpo().getAltura());

    }

    @Override
    public void update(Observable o, Object o1) {

//                Modelo s= (Modelo) o;
        repaint();

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
